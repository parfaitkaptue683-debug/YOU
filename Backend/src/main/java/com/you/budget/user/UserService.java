package com.you.budget.user;

import io.vertx.core.json.JsonObject;
import java.util.List;
import java.util.Optional;
import java.util.concurrent.CompletableFuture;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * UserService - Couche de logique m√©tier pour les utilisateurs
 * Contient la logique d'authentification, validation, et gestion des utilisateurs
 * Utilise UserRepository pour les op√©rations de base de donn√©es
 */
public class UserService {
    
    private static final Logger logger = LoggerFactory.getLogger(UserService.class);
    private final UserRepository userRepository;
    
    public UserService() {
        this.userRepository = new UserRepository();
        logger.info("‚úÖ UserService initialis√© avec UserRepository");
    }
    
    /**
     * Cr√©e un nouvel utilisateur
     * @param email L'email de l'utilisateur
     * @param name Le nom de l'utilisateur
     * @param password Le mot de passe de l'utilisateur
     * @return CompletableFuture<User> L'utilisateur cr√©√©
     * @throws IllegalArgumentException Si les donn√©es sont invalides
     */
    public CompletableFuture<User> createUser(String email, String name, String password) {
        logger.info("üîß Cr√©ation d'un nouvel utilisateur: {}", email);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                // Validation des donn√©es
                validateUserData(email, name, password);
                
                // V√©rifier si l'utilisateur existe d√©j√†
                return userRepository.existsByEmail(email)
                    .thenCompose(exists -> {
                        if (exists) {
                            logger.warn("‚ö†Ô∏è Utilisateur avec email {} existe d√©j√†", email);
                            throw new IllegalArgumentException("Un utilisateur avec cet email existe d√©j√†");
                        }
                        
                        // Cr√©er le nouvel utilisateur
                        User newUser = new User(email, name, password);
                        logger.info("üë§ Nouvel utilisateur cr√©√©: {} ({})", newUser.getName(), newUser.getId());
                        return userRepository.save(newUser);
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la cr√©ation de l'utilisateur {}: {}", email, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * Authentifie un utilisateur
     * @param email L'email de l'utilisateur
     * @param password Le mot de passe de l'utilisateur
     * @return CompletableFuture<Optional<User>> L'utilisateur authentifi√© ou vide
     */
    public CompletableFuture<Optional<User>> authenticateUser(String email, String password) {
        logger.info("üîê Tentative d'authentification pour: {}", email);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                // Validation des param√®tres
                if (email == null || email.trim().isEmpty()) {
                    throw new IllegalArgumentException("L'email est requis");
                }
                if (password == null || password.trim().isEmpty()) {
                    throw new IllegalArgumentException("Le mot de passe est requis");
                }
                
                return userRepository.findByEmailAndPassword(email, password)
                    .thenApply(userOpt -> {
                        if (userOpt.isPresent()) {
                            logger.info("‚úÖ Authentification r√©ussie pour: {}", email);
                        } else {
                            logger.warn("‚ùå √âchec d'authentification pour: {}", email);
                        }
                        return userOpt;
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de l'authentification de {}: {}", email, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * R√©cup√®re un utilisateur par son ID
     * @param id L'ID de l'utilisateur
     * @return CompletableFuture<Optional<User>> L'utilisateur trouv√© ou vide
     */
    public CompletableFuture<Optional<User>> getUserById(String id) {
        logger.info("üîç Recherche d'utilisateur par ID: {}", id);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (id == null || id.trim().isEmpty()) {
                    throw new IllegalArgumentException("L'ID est requis");
                }
                
                return userRepository.findById(id)
                    .thenApply(userOpt -> {
                        if (userOpt.isPresent()) {
                            logger.info("‚úÖ Utilisateur trouv√©: {} ({})", userOpt.get().getName(), id);
                        } else {
                            logger.warn("‚ö†Ô∏è Utilisateur non trouv√©: {}", id);
                        }
                        return userOpt;
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la recherche d'utilisateur {}: {}", id, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * R√©cup√®re un utilisateur par son email
     * @param email L'email de l'utilisateur
     * @return CompletableFuture<Optional<User>> L'utilisateur trouv√© ou vide
     */
    public CompletableFuture<Optional<User>> getUserByEmail(String email) {
        logger.info("üîç Recherche d'utilisateur par email: {}", email);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (email == null || email.trim().isEmpty()) {
                    throw new IllegalArgumentException("L'email est requis");
                }
                
                return userRepository.findByEmail(email)
                    .thenApply(userOpt -> {
                        if (userOpt.isPresent()) {
                            logger.info("‚úÖ Utilisateur trouv√©: {} ({})", userOpt.get().getName(), email);
                        } else {
                            logger.warn("‚ö†Ô∏è Utilisateur non trouv√©: {}", email);
                        }
                        return userOpt;
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la recherche d'utilisateur {}: {}", email, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * R√©cup√®re tous les utilisateurs
     * @return CompletableFuture<List<User>> Liste de tous les utilisateurs
     */
    public CompletableFuture<List<User>> getAllUsers() {
        logger.info("üìã R√©cup√©ration de tous les utilisateurs");
        
        return userRepository.findAll()
            .thenApply(users -> {
                logger.info("‚úÖ {} utilisateurs r√©cup√©r√©s", users.size());
                return users;
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la r√©cup√©ration des utilisateurs: {}", throwable.getMessage());
                throw new RuntimeException("Erreur lors de la r√©cup√©ration des utilisateurs", throwable);
            });
    }
    
    /**
     * Met √† jour un utilisateur
     * @param id L'ID de l'utilisateur √† mettre √† jour
     * @param email Le nouvel email (optionnel)
     * @param name Le nouveau nom (optionnel)
     * @param password Le nouveau mot de passe (optionnel)
     * @return CompletableFuture<Optional<User>> L'utilisateur mis √† jour ou vide si non trouv√©
     */
    public CompletableFuture<Optional<User>> updateUser(String id, String email, String name, String password) {
        logger.info("‚úèÔ∏è Mise √† jour de l'utilisateur: {}", id);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (id == null || id.trim().isEmpty()) {
                    throw new IllegalArgumentException("L'ID est requis");
                }
                
                return userRepository.findById(id)
                    .thenCompose(userOpt -> {
                        if (userOpt.isEmpty()) {
                            logger.warn("‚ö†Ô∏è Utilisateur non trouv√© pour mise √† jour: {}", id);
                            return CompletableFuture.completedFuture(Optional.empty());
                        }
                        
                        User user = userOpt.get();
                        logger.info("üë§ Mise √† jour de: {} ({})", user.getName(), user.getEmail());
                        
                        // Mettre √† jour les champs fournis
                        if (email != null && !email.trim().isEmpty()) {
                            // V√©rifier si le nouvel email n'est pas d√©j√† utilis√© par un autre utilisateur
                            return userRepository.existsByEmail(email)
                                .thenCompose(exists -> {
                                    if (exists && !user.getEmail().equals(email)) {
                                        logger.warn("‚ö†Ô∏è Email {} d√©j√† utilis√© par un autre utilisateur", email);
                                        throw new IllegalArgumentException("Cet email est d√©j√† utilis√© par un autre utilisateur");
                                    }
                                    user.setEmail(email);
                                    return CompletableFuture.completedFuture(null);
                                })
                                .thenCompose(v -> {
                                    if (name != null && !name.trim().isEmpty()) {
                                        user.setName(name);
                                    }
                                    if (password != null && !password.trim().isEmpty()) {
                                        user.setPassword(password);
                                    }
                                    
                                    user.touch(); // Mettre √† jour la date de modification
                                    logger.info("‚úÖ Utilisateur mis √† jour: {} ({})", user.getName(), user.getEmail());
                                    return userRepository.save(user);
                                })
                                .thenApply(updatedUser -> Optional.of(updatedUser));
                        } else {
                            // Pas de changement d'email, mise √† jour directe
                            if (name != null && !name.trim().isEmpty()) {
                                user.setName(name);
                            }
                            if (password != null && !password.trim().isEmpty()) {
                                user.setPassword(password);
                            }
                            
                            user.touch();
                            logger.info("‚úÖ Utilisateur mis √† jour: {} ({})", user.getName(), user.getEmail());
                            return userRepository.save(user)
                                .thenApply(updatedUser -> Optional.of(updatedUser));
                        }
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la mise √† jour de l'utilisateur {}: {}", id, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * Supprime un utilisateur
     * @param id L'ID de l'utilisateur √† supprimer
     * @return CompletableFuture<Boolean> true si supprim√©, false si non trouv√©
     */
    public CompletableFuture<Boolean> deleteUser(String id) {
        logger.info("üóëÔ∏è Suppression de l'utilisateur: {}", id);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (id == null || id.trim().isEmpty()) {
                    throw new IllegalArgumentException("L'ID est requis");
                }
                
                return userRepository.deleteById(id)
                    .thenApply(deleted -> {
                        if (deleted) {
                            logger.info("‚úÖ Utilisateur supprim√©: {}", id);
                        } else {
                            logger.warn("‚ö†Ô∏è Utilisateur non trouv√© pour suppression: {}", id);
                        }
                        return deleted;
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la suppression de l'utilisateur {}: {}", id, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * Recherche des utilisateurs par nom
     * @param name Le nom √† rechercher
     * @return CompletableFuture<List<User>> Liste des utilisateurs correspondants
     */
    public CompletableFuture<List<User>> searchUsersByName(String name) {
        logger.info("üîç Recherche d'utilisateurs par nom: {}", name);
        
        return CompletableFuture.supplyAsync(() -> {
            try {
                if (name == null || name.trim().isEmpty()) {
                    throw new IllegalArgumentException("Le nom de recherche est requis");
                }
                
                return userRepository.findByNameContaining(name)
                    .thenApply(users -> {
                        logger.info("‚úÖ {} utilisateurs trouv√©s pour '{}'", users.size(), name);
                        return users;
                    })
                    .join();
            } catch (Exception e) {
                logger.error("‚ùå Erreur lors de la recherche d'utilisateurs '{}': {}", name, e.getMessage());
                throw e;
            }
        });
    }
    
    /**
     * Compte le nombre total d'utilisateurs
     * @return CompletableFuture<Long> Le nombre d'utilisateurs
     */
    public CompletableFuture<Long> getUserCount() {
        logger.info("üìä Comptage du nombre d'utilisateurs");
        
        return userRepository.count()
            .thenApply(count -> {
                logger.info("‚úÖ Nombre d'utilisateurs: {}", count);
                return count;
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors du comptage des utilisateurs: {}", throwable.getMessage());
                throw new RuntimeException("Erreur lors du comptage des utilisateurs", throwable);
            });
    }
    
    /**
     * Valide les donn√©es d'un utilisateur
     * @param email L'email √† valider
     * @param name Le nom √† valider
     * @param password Le mot de passe √† valider
     * @throws IllegalArgumentException Si les donn√©es sont invalides
     */
    private void validateUserData(String email, String name, String password) {
        logger.debug("üîç Validation des donn√©es utilisateur: {}", email);
        
        if (email == null || email.trim().isEmpty()) {
            throw new IllegalArgumentException("L'email est requis");
        }
        if (!email.matches("^[\\w-\\.]+@([\\w-]+\\.)+[\\w-]{2,4}$")) {
            throw new IllegalArgumentException("Format d'email invalide");
        }
        if (name == null || name.trim().isEmpty()) {
            throw new IllegalArgumentException("Le nom est requis");
        }
        if (name.length() < 2) {
            throw new IllegalArgumentException("Le nom doit contenir au moins 2 caract√®res");
        }
        if (password == null || password.trim().isEmpty()) {
            throw new IllegalArgumentException("Le mot de passe est requis");
        }
        if (password.length() < 6) {
            throw new IllegalArgumentException("Le mot de passe doit contenir au moins 6 caract√®res");
        }
        
        logger.debug("‚úÖ Donn√©es utilisateur valides: {}", email);
    }
}
