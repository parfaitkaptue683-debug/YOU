package com.you.budget.expense;

import java.math.BigDecimal;
import java.time.format.DateTimeFormatter;
import java.util.List;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import com.you.budget.http.HttpController;

import io.vertx.core.json.JsonObject;
import io.vertx.ext.web.Router;
import io.vertx.ext.web.RoutingContext;

/**
 * ExpenseController - Contr√¥leur pour g√©rer les routes API des d√©penses
 * D√©finit les endpoints pour la cr√©ation, r√©cup√©ration, mise √† jour des d√©penses
 * Utilise ExpenseService pour la logique m√©tier
 */
public class ExpenseController {

    private static final Logger logger = LoggerFactory.getLogger(ExpenseController.class);
    private static final ExpenseService expenseService = new ExpenseService();
    private static final DateTimeFormatter DATE_FORMATTER = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");

    // Constructeur priv√© pour emp√™cher l'instanciation (classe utilitaire statique)
    private ExpenseController() {}

    /**
     * Enregistre toutes les routes li√©es aux d√©penses sur le routeur principal.
     * @param router Le routeur Vert.x sur lequel enregistrer les routes.
     */
    public static void registerRoutes(Router router) {
        // Routes de gestion des d√©penses
        router.post("/api/expenses").handler(ExpenseController::handleCreateExpense);
        router.get("/api/expenses/user/:userId").handler(ExpenseController::handleGetExpensesByUser);
        router.get("/api/expenses/budget/:budgetId").handler(ExpenseController::handleGetExpensesByBudget);
        router.get("/api/expenses/category/:category").handler(ExpenseController::handleGetExpensesByCategory);
        router.get("/api/expenses/search").handler(ExpenseController::handleSearchExpenses);
        router.get("/api/expenses/summary/:userId").handler(ExpenseController::handleGetExpenseSummary);
        router.put("/api/expenses/:id").handler(ExpenseController::handleUpdateExpense);
        router.delete("/api/expenses/:id").handler(ExpenseController::handleDeleteExpense);

        logger.info("‚úÖ Routes expense enregistr√©es.");
    }

    /**
     * G√®re la cr√©ation d'une nouvelle d√©pense.
     * Route: POST /api/expenses
     */
    private static void handleCreateExpense(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        if (!HttpController.validateJsonBody(ctx)) {
            HttpController.logResponse(ctx, 400);
            return;
        }

        JsonObject body = HttpController.getJsonBody(ctx);

        // V√©rifier les champs requis
        if (!body.containsKey("userId") || !body.containsKey("budgetId") || 
            !body.containsKey("category") || !body.containsKey("amount") || 
            !body.containsKey("description")) {
            HttpController.sendBadRequest(ctx, "userId, budgetId, category, amount et description sont requis");
            HttpController.logResponse(ctx, 400);
            return;
        }

        String userId = body.getString("userId");
        String budgetId = body.getString("budgetId");
        String category = body.getString("category");
        BigDecimal amount = new BigDecimal(body.getString("amount"));
        String description = body.getString("description");
        String paymentMethod = body.getString("paymentMethod");
        String location = body.getString("location");
        String notes = body.getString("notes");

        // Validation suppl√©mentaire des param√®tres
        if (budgetId == null || budgetId.trim().isEmpty()) {
            HttpController.sendBadRequest(ctx, "budgetId est requis");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üí∞ Cr√©ation d'une nouvelle d√©pense: {}‚Ç¨ dans {} pour l'utilisateur {}", amount, category, userId);

        // Utiliser le ExpenseService pour cr√©er la d√©pense
        expenseService.createExpense(userId, budgetId, category, amount, description, paymentMethod, location, notes)
            .thenAccept(expense -> {
                JsonObject responseData = expense.toJson();
                HttpController.sendCreated(ctx, "D√©pense cr√©√©e avec succ√®s", responseData);
                HttpController.logResponse(ctx, 201);
                logger.info("‚úÖ D√©pense cr√©√©e: {} ({})", expense.getDescription(), expense.getId());
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la cr√©ation de la d√©pense pour {}: {}", userId, throwable.getMessage());
                if (throwable.getCause() instanceof IllegalArgumentException) {
                    HttpController.sendBadRequest(ctx, throwable.getCause().getMessage());
                    HttpController.logResponse(ctx, 400);
                } else {
                    HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                    HttpController.logResponse(ctx, 500);
                }
                return null;
            });
    }

    /**
     * G√®re la r√©cup√©ration des d√©penses d'un utilisateur.
     * Route: GET /api/expenses/user/:userId
     */
    private static void handleGetExpensesByUser(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String userId = HttpController.getPathParam(ctx, "userId");
        if (userId == null) {
            HttpController.sendBadRequest(ctx, "ID utilisateur manquant");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üìã R√©cup√©ration des d√©penses pour l'utilisateur: {}", userId);

        // Utiliser le ExpenseService pour r√©cup√©rer les d√©penses
        expenseService.getExpensesByUser(userId)
            .thenAccept(expenses -> {
                List<JsonObject> expensesData = expenses.stream()
                    .map(Expense::toJson)
                    .toList();

                JsonObject responseData = new JsonObject()
                    .put("expenses", expensesData)
                    .put("count", expenses.size());
                HttpController.sendSuccess(ctx, "Liste des d√©penses", responseData);
                HttpController.logResponse(ctx, 200);
                logger.info("‚úÖ {} d√©penses r√©cup√©r√©es pour: {}", expenses.size(), userId);
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la r√©cup√©ration des d√©penses pour {}: {}", userId, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }

    /**
     * G√®re la r√©cup√©ration des d√©penses d'un budget.
     * Route: GET /api/expenses/budget/:budgetId
     */
    private static void handleGetExpensesByBudget(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String budgetId = HttpController.getPathParam(ctx, "budgetId");
        if (budgetId == null) {
            HttpController.sendBadRequest(ctx, "ID budget manquant");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üìã R√©cup√©ration des d√©penses pour le budget: {}", budgetId);

        // Utiliser le ExpenseService pour r√©cup√©rer les d√©penses
        expenseService.getExpensesByBudget(budgetId)
            .thenAccept(expenses -> {
                List<JsonObject> expensesData = expenses.stream()
                    .map(Expense::toJson)
                    .toList();

                JsonObject responseData = new JsonObject()
                    .put("expenses", expensesData)
                    .put("count", expenses.size());
                HttpController.sendSuccess(ctx, "Liste des d√©penses du budget", responseData);
                HttpController.logResponse(ctx, 200);
                logger.info("‚úÖ {} d√©penses r√©cup√©r√©es pour le budget: {}", expenses.size(), budgetId);
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la r√©cup√©ration des d√©penses pour le budget {}: {}", budgetId, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }

    /**
     * G√®re la r√©cup√©ration des d√©penses par cat√©gorie.
     * Route: GET /api/expenses/category/:category
     */
    private static void handleGetExpensesByCategory(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String category = HttpController.getPathParam(ctx, "category");
        if (category == null) {
            HttpController.sendBadRequest(ctx, "Cat√©gorie manquante");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üìã R√©cup√©ration des d√©penses pour la cat√©gorie: {}", category);

        // Utiliser le ExpenseService pour r√©cup√©rer les d√©penses
        expenseService.getExpensesByCategory(category)
            .thenAccept(expenses -> {
                List<JsonObject> expensesData = expenses.stream()
                    .map(Expense::toJson)
                    .toList();

                JsonObject responseData = new JsonObject()
                    .put("expenses", expensesData)
                    .put("category", category)
                    .put("count", expenses.size());
                HttpController.sendSuccess(ctx, "Liste des d√©penses par cat√©gorie", responseData);
                HttpController.logResponse(ctx, 200);
                logger.info("‚úÖ {} d√©penses r√©cup√©r√©es pour la cat√©gorie: {}", expenses.size(), category);
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la r√©cup√©ration des d√©penses pour la cat√©gorie {}: {}", category, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }

    /**
     * G√®re la recherche de d√©penses par description.
     * Route: GET /api/expenses/search?q=description
     */
    private static void handleSearchExpenses(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String query = ctx.request().getParam("q");
        if (query == null || query.trim().isEmpty()) {
            HttpController.sendBadRequest(ctx, "Param√®tre de recherche 'q' requis");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üîç Recherche de d√©penses: {}", query);

        // Utiliser le ExpenseService pour rechercher les d√©penses
        expenseService.searchExpensesByDescription(query)
            .thenAccept(expenses -> {
                List<JsonObject> expensesData = expenses.stream()
                    .map(Expense::toJson)
                    .toList();

                JsonObject responseData = new JsonObject()
                    .put("expenses", expensesData)
                    .put("query", query)
                    .put("count", expenses.size());
                HttpController.sendSuccess(ctx, "R√©sultats de recherche", responseData);
                HttpController.logResponse(ctx, 200);
                logger.info("‚úÖ {} d√©penses trouv√©es pour: {}", expenses.size(), query);
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la recherche de d√©penses pour '{}': {}", query, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }

    /**
     * G√®re la r√©cup√©ration du r√©sum√© des d√©penses d'un utilisateur.
     * Route: GET /api/expenses/summary/:userId
     */
    private static void handleGetExpenseSummary(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String userId = HttpController.getPathParam(ctx, "userId");
        if (userId == null) {
            HttpController.sendBadRequest(ctx, "ID utilisateur manquant");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üìä G√©n√©ration du r√©sum√© des d√©penses pour: {}", userId);

        // Utiliser le ExpenseService pour g√©n√©rer le r√©sum√©
        expenseService.generateExpenseSummary(userId)
            .thenAccept(summary -> {
                HttpController.sendSuccess(ctx, "R√©sum√© des d√©penses", summary);
                HttpController.logResponse(ctx, 200);
                logger.info("‚úÖ R√©sum√© des d√©penses g√©n√©r√© pour: {}", userId);
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la g√©n√©ration du r√©sum√© pour {}: {}", userId, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }

    /**
     * G√®re la mise √† jour d'une d√©pense.
     * Route: PUT /api/expenses/:id
     */
    private static void handleUpdateExpense(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String expenseId = HttpController.getPathParam(ctx, "id");
        if (expenseId == null) {
            HttpController.sendBadRequest(ctx, "ID d√©pense manquant");
            HttpController.logResponse(ctx, 400);
            return;
        }

        if (!HttpController.validateJsonBody(ctx)) {
            HttpController.logResponse(ctx, 400);
            return;
        }

        JsonObject body = HttpController.getJsonBody(ctx);
        Expense updatedExpense = Expense.fromJson(body); // Cr√©e un Expense partiel pour la mise √† jour

        logger.info("üîÑ Mise √† jour de la d√©pense {}: {}", expenseId, body.encodePrettily());

        expenseService.updateExpense(expenseId, updatedExpense)
            .thenAccept(expenseOpt -> {
                if (expenseOpt.isPresent()) {
                    Expense expense = expenseOpt.get();
                    JsonObject responseData = expense.toJson();
                    HttpController.sendSuccess(ctx, "D√©pense mise √† jour avec succ√®s", responseData);
                    HttpController.logResponse(ctx, 200);
                    logger.info("‚úÖ D√©pense mise √† jour: {} ({})", expense.getDescription(), expense.getId());
                } else {
                    HttpController.sendNotFound(ctx, "D√©pense non trouv√©e");
                    HttpController.logResponse(ctx, 404);
                    logger.warn("‚ö†Ô∏è D√©pense non trouv√©e pour la mise √† jour: {}", expenseId);
                }
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la mise √† jour de la d√©pense {}: {}", expenseId, throwable.getMessage());
                if (throwable.getCause() instanceof IllegalArgumentException) {
                    HttpController.sendBadRequest(ctx, throwable.getCause().getMessage());
                    HttpController.logResponse(ctx, 400);
                } else {
                    HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                    HttpController.logResponse(ctx, 500);
                }
                return null;
            });
    }

    /**
     * G√®re la suppression d'une d√©pense.
     * Route: DELETE /api/expenses/:id
     */
    private static void handleDeleteExpense(RoutingContext ctx) {
        HttpController.logRequest(ctx);

        String expenseId = HttpController.getPathParam(ctx, "id");
        if (expenseId == null) {
            HttpController.sendBadRequest(ctx, "ID d√©pense manquant");
            HttpController.logResponse(ctx, 400);
            return;
        }

        logger.info("üóëÔ∏è Suppression de la d√©pense: {}", expenseId);

        expenseService.deleteExpense(expenseId)
            .thenAccept(deleted -> {
                if (deleted) {
                    HttpController.sendSuccess(ctx, "D√©pense supprim√©e avec succ√®s", new JsonObject().put("id", expenseId));
                    HttpController.logResponse(ctx, 200);
                    logger.info("‚úÖ D√©pense supprim√©e: {}", expenseId);
                } else {
                    HttpController.sendNotFound(ctx, "D√©pense non trouv√©e");
                    HttpController.logResponse(ctx, 404);
                    logger.warn("‚ö†Ô∏è D√©pense non trouv√©e pour la suppression: {}", expenseId);
                }
            })
            .exceptionally(throwable -> {
                logger.error("‚ùå Erreur lors de la suppression de la d√©pense {}: {}", expenseId, throwable.getMessage());
                HttpController.sendInternalError(ctx, "Erreur interne du serveur");
                HttpController.logResponse(ctx, 500);
                return null;
            });
    }
}
